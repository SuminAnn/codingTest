package promgrammers;

import java.util.*;

public class TargetNumber {

	static int[] op = {1,-1};
    static class Node{
        int cnt;
        int cur;
        
        public Node(int cur, int cnt){
            this.cur = cur;
            this.cnt = cnt;
        }
    }
    static Queue<Node> queue = new LinkedList<>();
    static int answer = 0;
    
    public int solution(int[] numbers, int target) {
        bfs(numbers, target);
        return answer;
    }
    
    public void bfs(int[] numbers, int target){
        int num = numbers.length-1;
        queue.add(new Node(numbers[0],0));
        queue.add(new Node(numbers[0]*-1,0));
        
        while(!queue.isEmpty()){
            Node node = queue.poll();
            
            if(node.cnt == num){
                if(node.cur == target) answer++;
                continue;
            }
            
            for(int i=0; i<2; i++){
                int tmp = node.cur + (numbers[node.cnt + 1] * op[i]);
                queue.add(new Node(tmp, node.cnt+1));
            }
        }
    }
    
    /*
      3		    5
	1	1	1	1	1

	(1,0) (-1,0)
	(-1,0) (2,1) (0,1)
	(2,1) (0,1) (0,1) (-2,1)
	(0,1) (0,1) (-2,1) (3,2) (1,2)
	(0,1) (-2,1) (3,2) (1,2) (1,2) (-1,2)
	(-2,1) (3,2) (1,2) (1,2) (-1,2) (1,2) (-1,2)
	(3,2) (1,2) (1,2) (-1,2) (1,2) (-1,2) (-1,2) (-3,2)
	(1,2) (1,2) (-1,2) (1,2) (-1,2) (-1,2) (-3,2) (4,3) (2,3)
	(1,2) (-1,2) (1,2) (-1,2) (-1,2) (-3,2) (4,3) (2,3) (2,3) (0,3)
	(-1,2) (1,2) (-1,2) (-1,2) (-3,2) (4,3) (2,3) (2,3) (0,3) (2,3) (0,3)
	(1,2) (-1,2) (-1,2) (-3,2) (4,3) (2,3) (2,3) (0,3) (2,3) (0,3) (0,3) (-2,3)
	(-1,2) (-1,2) (-3,2) (4,3) (2,3) (2,3) (0,3) (2,3) (0,3) (0,3) (-2,3) (2,3) (0,3)
	(-1,2) (-3,2) (4,3) (2,3) (2,3) (0,3) (2,3) (0,3) (0,3) (-2,3) (2,3) (0,3) (0,3) (-2,3)
	(-3,2) (4,3) (2,3) (2,3) (0,3) (2,3) (0,3) (0,3) (-2,3) (2,3) (0,3) (0,3) (-2,3) (0,3) (-2,3)
	(4,3) (2,3) (2,3) (0,3) (2,3) (0,3) (0,3) (-2,3) (2,3) (0,3) (0,3) (-2,3) (0,3) (-2,3) (-2,3) (-4,3)
	(2,3) (2,3) (0,3) (2,3) (0,3) (0,3) (-2,3) (2,3) (0,3) (0,3) (-2,3) (0,3) (-2,3) (-2,3) (-4,3) 			(5,4) (3,4)
	(2,3) (0,3) (2,3) (0,3) (0,3) (-2,3) (2,3) (0,3) (0,3) (-2,3) (0,3) (-2,3) (-2,3) (-4,3)  				(3,4) (1,4)
	(0,3) (2,3) (0,3) (0,3) (-2,3) (2,3) (0,3) (0,3) (-2,3) (0,3) (-2,3) (-2,3) (-4,3) 						(3,4) (1,4)
	(2,3) (0,3) (0,3) (-2,3) (2,3) (0,3) (0,3) (-2,3) (0,3) (-2,3) (-2,3) (-4,3) 							(1,4) (-1,4)
	(0,3) (0,3) (-2,3) (2,3) (0,3) (0,3) (-2,3) (0,3) (-2,3) (-2,3) (-4,3) 									(3,4) (1,4)
	(0,3) (-2,3) (2,3) (0,3) (0,3) (-2,3) (0,3) (-2,3) (-2,3) (-4,3) 										(1,4) (-1,4)
	(-2,3) (2,3) (0,3) (0,3) (-2,3) (0,3) (-2,3) (-2,3) (-4,3) 												(1,4) (-1,4)
	(2,3) (0,3) (0,3) (-2,3) (0,3) (-2,3) (-2,3) (-4,3) 													(-1,4) (-3,4)
	(0,3) (0,3) (-2,3) (0,3) (-2,3) (-2,3) (-4,3) 															(3,4) (1,4)
	(0,3) (-2,3) (0,3) (-2,3) (-2,3) (-4,3) 																(1,4) (-1,4)
	(-2,3) (0,3) (-2,3) (-2,3) (-4,3) 																		(1,4) (-1,4)
	(0,3) (-2,3) (-2,3) (-4,3) 																				(1,4) (-3,4)
	(-2,3) (-2,3) (-4,3) 																					(1,4) (-1,4)
	(-2,3) (-4,3) 																							(-1,4) (-3,4)
	(-4,3) 																									(-1,4) (-3,4)
																											(-3,4) (-5,4) 
     */
}
